import { useRef, useState, useEffect } from 'react'
import { useParams } from 'react-router-dom'
import useFetch from '../../hooks/useFetch';

// styles
import './Edit.css'

const Edit = () => {
    const [name, setName] = useState('');
    const [dosage, setDosage] = useState('');
    const [dosageForm, setDosageForm] = useState('');
    const [frequency, setFrequency] = useState('');
    const [adminRoute, setAdminRoute] = useState('');
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');
    const [doctorName, setDoctorName] = useState('');
    const [doctorEmail, setDoctorEmail] = useState('');
    const [pharmacyName, setPharmacyName] = useState('');
    const [pharmacyEmail, setPharmacyEmail] = useState('');
    const [instructions, setInstructions] = useState('');
    const [storage, setStorage] = useState('');
    const [sideEffects, setSideEffects] = useState('');
    const [warning, setWarning] = useState('');
  
    const [newIngredient, setNewIngredient] = useState('');
    const [contains, setContains] = useState([]);
    const ingredientInput = useRef(null);
    const { id } = useParams()

    // first fetch the medication data using id of medication we get using useParams hook
    const { data, isPending, error } = useFetch(`http://localhost:3000/medications/${id}`)
  
    // check for data then populate input fields with the data for the medication once using useEffect - the fields should then be editable
    useEffect(() => {
      if (data) {
        setName(data.name);
        setDosage(data.dosage);
        setDosageForm(data.dosageForm);
        setFrequency(data.frequency);
        setAdminRoute(data.adminRoute);
        setStartDate(data.startDate);
        setEndDate(data.endDate);
        setDoctorName(data.doctorName);
        setDoctorEmail(data.doctorEmail);
        setPharmacyName(data.pharmacyName);
        setPharmacyEmail(data.pharmacyEmail);
        setNewIngredient(data.contains);
        setContains(data.contains);
        setInstructions(data.instructions);
        setStorage(data.storage);
        setSideEffects(data.sideEffects);
        setWarning(data.warning);
      }
    }, [data]);

    // form submit function
    const handleSubmit = (e) => {
      e.preventDefault()

    };

    // add ingredients function
    const handleAdd = (e) => {
      e.preventDefault();

        // we have to check first if newIngredient is a string then do our logic inside and if not return -1 because if it has no value it will throw trim is not a function and controlled input error
        if (typeof newIngredient === 'string') {
          const ing = newIngredient.trim()

          if (ing && !contains.includes(ing)) {
            setContains((prevIngredients) => [...prevIngredients, ing]);
          }
          setNewIngredient('');
          ingredientInput.current.focus();
        } else {
          return -1
        }
    };

    // remove ingredients function
    const handleRemove = (e) => {
      e.preventDefault()
       // This condition checks whether the current element's index is not equal to the last index in the array. In other words, it filters out the last ingredient in the array. If the condition is true (meaning the element's index is not the last index), the element is included in the new array generated by the filter function. If the condition is false (meaning the element's index is the last index), the element is excluded from the new array.
      setContains(contains.filter((ingredient, index) => {
        return index !== contains.length -1;
      }))
    }

    return (
      <form className="edit-form" onSubmit={handleSubmit}>
        <h1 className="page-title">Edit Medication</h1>
        {error && <p className="error">{error}</p>}
        {isPending && <p className="loading">please wait...</p>}
        <div className='form-control'>
          <label>
            <span>Name:</span>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Dosage:</span>
            <input
              type="text"
              value={dosage}
              onChange={(e) => setDosage(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Type:</span>
            <input
              type="text"
              value={dosageForm}
              onChange={(e) => setDosageForm(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Frequency:</span>
            <input
              type="text"
              value={frequency}
              onChange={(e) => setFrequency(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Admin Route:</span>
            <input
              type="text"
              value={adminRoute}
              onChange={(e) => setAdminRoute(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Start:</span>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>End:</span>
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Doctor Name:</span>
            <input
              type="text"
              value={doctorName}
              onChange={(e) => setDoctorName(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Email:</span>
            <input
              type="email"
              value={doctorEmail}
              onChange={(e) => setDoctorEmail(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Pharmacy Name:</span>
            <input
              type="text"
              value={pharmacyName}
              onChange={(e) => setPharmacyName(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Email:</span>
            <input
              type="email"
              value={pharmacyEmail}
              onChange={(e) => setPharmacyEmail(e.target.value)}
            //   required
            />
          </label>
  
          <label>
            <span>Contains:</span>
            <div className='ingredients'>
              <input
                type="text"
                value={newIngredient}
                ref={ingredientInput}
                onChange={(e) => setNewIngredient(e.target.value)}
              />
              <button onClick={handleAdd} className='add-btn'>
                Add
              </button>
              {/* added delete button with click event handler which references handleRemove function for user to delete ingredients */}
              <button onClick={handleRemove} className='delete-btn'>
                Delete
              </button>
            </div>
          </label>
  
          <p>
            Contains:{" "}
            {contains.map((ingredient) => (
              <em key={ingredient}>{ingredient}, </em>
            ))}
          </p>
  
          <label>
            <span>Instructions:</span>
            <input
              type="text"
              value={instructions}
              onChange={(e) => setInstructions(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Storage:</span>
            <input
              type="text"
              value={storage}
              onChange={(e) => setStorage(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Side Effects:</span>
            <input
              type="text"
              value={sideEffects}
              onChange={(e) => setSideEffects(e.target.value)}
            //   required
            />
          </label>
          <label>
            <span>Advice:</span>
            <input
              type="text"
              value={warning}
              onChange={(e) => setWarning(e.target.value)}
            //   required
            />
          </label>
          <button className='add-btn'>Add</button>
        </div>
      </form>
    )
  }
  
  export default Edit